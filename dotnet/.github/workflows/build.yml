  build-demo-apps:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: windows-latest
            name: Windows x64
            arch: x64
            vcpkg_triplet: x64-windows-static
            vcpkg_config: Release
            dotnet_rid: win-x64
          - os: ubuntu-latest
            name: Linux x64
            arch: x64
            vcpkg_triplet: x64-linux
            vcpkg_config: MinSizeRel
            dotnet_rid: linux-x64

      fail-fast: false
    name: 'demo app: ${{ matrix.name }}'
    needs:
      - make-fat-native

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true

      - uses: actions/download-artifact@v4
        with:
          name: native-fat
          path: xbin/

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: |
            8.0.x
            9.0.x

      - name: Publish
        run: dotnet publish dotnet/ConsoleDemo/ -r ${{ matrix.dotnet_rid }} --self-contained true -p:PublishSingleFile=true  -p:PublishTrimmed=true -p:IncludeNativeLibrariesForSelfExtract=true

      - name: Setup screenshot tools (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get --yes install xvfb scrot
          
      - name: Run app and capture screenshot (Linux)
        if: runner.os == 'Linux'
        run: |
          # Start Xvfb
          Xvfb :99 -screen 0 1920x1080x24 &
          export DISPLAY=:99
          sleep 2
          
          # Run the app in background
          chmod +x dotnet/ConsoleDemo/bin/Release/net9.0/${{ matrix.dotnet_rid }}/publish/ConsoleDemo
          dotnet/ConsoleDemo/bin/Release/net9.0/${{ matrix.dotnet_rid }}/publish/ConsoleDemo &
          APP_PID=$!
          
          # Wait for app to render
          sleep 5
          
          # Capture screenshot
          mkdir -p screenshots
          scrot screenshots/demo-${{ matrix.dotnet_rid }}.png
          
          # Kill the app
          kill $APP_PID || true
          
      - name: Run app and capture screenshot (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          # Start the app in background
          $app = Start-Process -FilePath "dotnet\ConsoleDemo\bin\Release\net9.0\${{ matrix.dotnet_rid }}\publish\ConsoleDemo.exe" -PassThru
          
          # Wait for app to render
          Start-Sleep -Seconds 5
          
          # Capture screenshot using PowerShell
          New-Item -ItemType Directory -Force -Path screenshots
          
          Add-Type -AssemblyName System.Windows.Forms,System.Drawing
          $screens = [System.Windows.Forms.Screen]::AllScreens
          $bounds = $screens[0].Bounds
          $bitmap = New-Object System.Drawing.Bitmap $bounds.Width, $bounds.Height
          $graphics = [System.Drawing.Graphics]::FromImage($bitmap)
          $graphics.CopyFromScreen($bounds.Location, [System.Drawing.Point]::Empty, $bounds.Size)
          $bitmap.Save("screenshots\demo-${{ matrix.dotnet_rid }}.png", [System.Drawing.Imaging.ImageFormat]::Png)
          $graphics.Dispose()
          $bitmap.Dispose()
          
          # Kill the app
          Stop-Process -Id $app.Id -Force -ErrorAction SilentlyContinue

      - uses: actions/upload-artifact@v4
        name: Collect Artifacts
        with:
          name: dotnet-demo-${{ matrix.dotnet_rid }}
          compression-level: 9
          if-no-files-found: error
          path: |
            dotnet/ConsoleDemo/bin/Release/net9.0/${{ matrix.dotnet_rid }}/publish/*
            screenshots/*.png
